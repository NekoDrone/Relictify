@using Relictify.Backend.API
@using Relictify.Backend.Characters
@using Relictify.Backend.Characters.Builder
@using Relictify.Backend.WebStorage
@using Relictify.StateManagement
@inject IEntryStore EntryStore
@inject IStateService AppState


@if (_hasBeenAdded)
{
    <div class="modal-item-inactive" title="Character has been added">
        <img class="item-char-image" src="@CharFromManifest.Name-splash.webp" alt="@CharFromManifest.Name"/>
        <img class="item-element-icon" src="path-@(CharFromManifest.Path).webp" alt="@CharFromManifest.Path"/>
        <p class="item-char-name">@CharFromManifest.Name</p>
    </div>
}

else
{
    <div class="modal-item-@CharFromManifest.Rarity-star" @onclick="@AddNewChar" title="@CharFromManifest.Name">
        <img class="item-char-image" src="@CharFromManifest.Name-splash.webp" alt="@CharFromManifest.Name"/>
        <img class="item-element-icon" src="path-@(CharFromManifest.Path).webp" alt="@CharFromManifest.Path"/>
        <p class="item-char-name">@CharFromManifest.Name</p>
    </div>
}


@code {
    [Parameter]
    public required CharacterManifestItem CharFromManifest { get; set; }

    private bool _hasBeenAdded;
    
    private void AddNewChar()
    {
        Character newChar = CharacterBuilderDirector.BuildFromManifest(CharFromManifest);
        CharacterEntry newEntry = new(newChar);
        EntryStore.SaveEntry(newEntry);
        AppState.ChangeEntry(newEntry);
    }

    protected override void OnInitialized()
    {
        string entryIdentifier = $"Entry: {CharFromManifest.Name}";
        this._hasBeenAdded = EntryStore.ContainsEntry(entryIdentifier);
    }
    
}