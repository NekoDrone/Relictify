@using Relictify.Backend.API
@using Relictify.Backend.Characters
@using Relictify.Backend.Characters.Builder
@using Relictify.Backend.WebStorage
@using Relictify.StateManagement
@inject IEntryStore EntryStore
@inject IStateService AppState

<div class="modal-item-@CharFromManifest.Rarity-star" @onclick="@AddNewChar">
    <img class="item-char-image" src="@CharFromManifest.Name-splash.webp" alt="@CharFromManifest.Name"/>
    <img class="item-element-icon" src="path-@(CharFromManifest.Path).webp" alt="@CharFromManifest.Path"/>
    <p class="item-char-name">@CharFromManifest.Name</p>
</div>

@code {
    [Parameter]
    public required CharacterManifestItem CharFromManifest { get; set; }
    
    private void AddNewChar()
    {
        Character newChar = CharacterBuilderDirector.BuildFromManifest(CharFromManifest);
        CharacterEntry newEntry = new(newChar);
        EntryStore.SaveEntry(newEntry);
        AppState.ChangeEntry(newEntry);
    }
    
    // TODO: If character is already active, grey out the box (change the CSS class on the conditional).
    
}